@model IEnumerable<OnlineLibraryWebApplication.Models.Genre>

@{
    ViewData["Title"] = "Жанри";
}

<h1>@ViewBag.PageTitle</h1>

@*<p>
    <a asp-action="Create">Додати новий жанр</a>
</p>
 <table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.GenreName)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.GenreName)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Редагувати</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Деталі</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Видалити</a>
            </td>
        </tr>
}
    </tbody>
</table> *@

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <div class="list-group">
                @foreach (var genre in Model)
                {
                    <a href="@Url.Action("Index", "Books", new { Id = genre.Id, Name = genre.GenreName, filteredBy = "genres" })" class="list-group-item list-group-item-action custom-card d-flex justify-content-between align-items-center">
                        <h5 class="card-title">@Html.DisplayFor(modelItem => genre.GenreName)</h5>
                        <span class="badge rounded-pill badge-dark-purple">@genre.BookCount</span>
                    </a>
                }
            </div>
        </div>
        <div class="col-md-6">
            <div id="bookTimelineChart" style="margin-top: 50px;"></div>
        </div>
    </div>
</div>

@* @section Scripts {
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        google.charts.load('current', { packages: ['timeline'] });
        google.charts.setOnLoadCallback(drawCharts);

        function drawCharts() {
            function drawBookTimeline() {
                fetch('/api/charts/bookTimeline')
                    .then(response => response.json())
                    .then(data => {
                        const container = document.getElementById('bookTimelineChart');
                        const chart = new google.visualization.Timeline(container);
                        const dataTable = new google.visualization.DataTable();

                        dataTable.addColumn({ type: 'string', id: 'Year' });
                        dataTable.addColumn({ type: 'string', id: 'Book' });
                        dataTable.addColumn({ type: 'date', id: 'Start' });
                        dataTable.addColumn({ type: 'date', id: 'End' });
                        dataTable.addColumn({ type: 'string', role: 'tooltip', 'p': { 'html': true } });

                        data.forEach(item => {
                            if (item && item.books) {
                                item.books.forEach(book => {
                                    const startDate = new Date(item.year, 0, 1);
                                    const endDate = new Date(item.year, 11, 31);
                                    const tooltipHtml = `
                                                <div>
                                                    <strong>${book.title}</strong><br/>
                                                    <img src="${book.coverImage}" alt="${book.title}" style="width: 100px; height: auto;" />
                                                </div>`;
                                    dataTable.addRow([item.year.toString(), book.title, startDate, endDate, tooltipHtml]);
                                });
                            }
                        });

                        const options = {
                            title: 'Book Timeline',
                            width: 800,
                            height: 600,
                            colors: ['#9E7BFF'],
                            tooltip: { isHtml: true }
                        };

                        chart.draw(dataTable, options);
                    })
                    .catch(error => {
                        console.error('Error fetching book timeline data:', error);
                    });
            }

            drawBookTimeline();
        }
    </script>
}
 *@